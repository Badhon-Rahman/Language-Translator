1. Download python latest stable version from ms stroe
2. Install python and check it from admistrative mode cmd through: python --version
3. Install pip: python -m pip install flask googletrans==4.0.0-rc1
4. Check pip installed: python -m pip --version 
If pip is not installed, you can manually install it using: python -m ensurepip --upgrade
5. Create a file named app.py and add the script:

from flask import Flask, request, jsonify
from googletrans import Translator

app = Flask(__name__)
translator = Translator()

@app.route('/translate', methods=['POST'])
def translate_conversation():
    try:
        # Extract parameters from the request
        data = request.json
        conversation = data.get('conversation')
        conversation_current_language = data.get('conversationCurrentLanguage')
        expected_output_language = data.get('expectedOutputLanguage')

        # Validate input
        if not conversation or not conversation_current_language or not expected_output_language:
            return jsonify({'error': 'Missing required parameters'}), 400

        # Translate conversation
        translated_text = translator.translate(
            conversation, 
            src=conversation_current_language, 
            dest=expected_output_language
        ).text

        # Return the translated text
        return jsonify({'translatedConversation': translated_text}), 200
    
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)

6. To run the API, save the script to a file app.py : python app.py
7. If you don’t have the requests library installed, you can install it using pip: python -m pip install requests
8. Save the http post req in translate_request.py :
pip install SpeechRecognition pydub
python -m pip install sounddevice numpy
python -m pip install SpeechRecognition


import sounddevice as sd
import numpy as np
import speech_recognition as sr
import requests
import json
import os
from scipy.io.wavfile import write
from gtts import gTTS
import pygame

# Parameters
api_url = 'http://127.0.0.1:5000/translate'
language_current = 'bn'  # Bengali
language_expected = 'en'  # Target language for translation
audio_file = 'input.wav'

# Record audio from the microphone
def record_audio(filename, duration=20, fs=44100):
    print("Recording...")
    recording = sd.rec(int(duration * fs), samplerate=fs, channels=2, dtype='int16')
    sd.wait()
    print("Recording finished.")
    # Save the recording as a WAV file
    write(filename, fs, recording)

# Convert audio to text using Speech Recognition
def audio_to_text(filename, language='bn'):
    recognizer = sr.Recognizer()
    with sr.AudioFile(filename) as source:
        audio_data = recognizer.record(source)
        # Using Google Web Speech API to recognize Bengali
        try:
            text = recognizer.recognize_google(audio_data, language=language)
            return text
        except sr.UnknownValueError:
            print("Google Speech Recognition could not understand audio")
            return ""
        except sr.RequestError as e:
            print(f"Could not request results from Google Speech Recognition service; {e}")
            return ""

# Function to send translation request
def translate_text(text, current_language, expected_language):
    data = {
        'conversation': text,
        'conversationCurrentLanguage': current_language,
        'expectedOutputLanguage': expected_language
    }
    response = requests.post(api_url, json=data)
    # Decode the Unicode escape sequences in the response
    response_data = json.loads(response.text)
    translated_text = response_data.get('translatedConversation', '')
    return translated_text

# Play the translated text
def play_text(text):
    try:
        tts = gTTS(text, lang=language_expected)
        tts.save('output.mp3')
        pygame.mixer.init()
        pygame.mixer.music.load('output.mp3')
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
        os.remove('output.mp3')
    except Exception as e:
        print(f"Error during TTS processing: {e}")

# Main process
record_audio(audio_file, duration=20)
text = audio_to_text(audio_file, language='bn')
print(f"Recognized text: {text}")

translated_text = translate_text(text, language_current, language_expected)
print(f"Translated text: {translated_text}")

# Clean up the audio file
os.remove(audio_file)

# Output translated text to file and play it
output_file = 'response_output.txt'
with open(output_file, 'w', encoding='utf-8') as f:
    f.write(translated_text)

print(f"Translated text written to {output_file}")

play_text(translated_text)


 
8. Run it in through : python translate_request.py
9. To play audio
gTTS (Google Text-to-Speech) supports a wide range of languages and is suitable for many language scripts. Here’s how you can use gTTS to play text in various languages:

Install gTTS and playsound Libraries
python -m pip install gtts playsound

To handle automatic language detection, you need to implement a language detection mechanism. Here’s an updated script that uses langdetect to detect the language and then uses gTTS to convert the text to speech:

Install langdetect
python -m pip install langdetect

python -m pip install gtts playsound langdetect
python -m pip install pygame

Script: 

from gtts import gTTS
import pygame
from langdetect import detect
import os

# Initialize pygame mixer
pygame.mixer.init()

# Path to the text file
file_path = 'response_output.txt'

# Read the text from the file
try:
    with open(file_path, 'r', encoding='utf-8') as file:
        text = file.read()
except FileNotFoundError:
    print(f"The file {file_path} does not exist.")
    exit()

# Check if the file is empty
if not text.strip():
    print(f"The file {file_path} is empty.")
    exit()

# Detect the language of the text
try:
    lang = detect(text)
except Exception as e:
    print(f"Error detecting language: {e}")
    lang = 'en'  # Default to English if detection fails

# Create a gTTS object with the detected language
try:
    tts = gTTS(text, lang=lang)
    # Save the audio file
    audio_file = 'output.mp3'
    tts.save(audio_file)

    # Play the audio file
    pygame.mixer.music.load(audio_file)
    pygame.mixer.music.play()

    # Wait for the audio to finish playing
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

    # Clean up the audio file
    os.remove(audio_file)

    print("Text has been spoken.")
except Exception as e:
    print(f"Error during TTS processing: {e}")

10. python -m pip install scipy

